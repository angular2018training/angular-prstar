webpackHotUpdate(1,{

/***/ "./src/main/webapp/app/screens/biz-interview/containers/interview-list-per-role-page/interview-list-per-role-page.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = __webpack_require__(\"./node_modules/@angular/core/esm5/core.js\");\r\nvar router_1 = __webpack_require__(\"./node_modules/@angular/router/esm5/router.js\");\r\nvar interview_service_1 = __webpack_require__(\"./src/main/webapp/app/screens/biz-interview/services/interview.service.ts\");\r\nvar ng_jhipster_1 = __webpack_require__(\"./node_modules/ng-jhipster/index.js\");\r\nvar shared_1 = __webpack_require__(\"./src/main/webapp/app/shared/index.ts\");\r\nvar InterviewListPerRolePageComponent = /** @class */ (function () {\r\n    function InterviewListPerRolePageComponent(activatedRoute, interviewService, jhiAlertService, principal, router) {\r\n        this.activatedRoute = activatedRoute;\r\n        this.interviewService = interviewService;\r\n        this.jhiAlertService = jhiAlertService;\r\n        this.principal = principal;\r\n        this.router = router;\r\n        this.listInterview = [];\r\n        this.canGotoInterviewSummary = false;\r\n        this.countOfPros = 0;\r\n        this.countOfSaved = 0;\r\n    }\r\n    InterviewListPerRolePageComponent.prototype.ngOnInit = function () {\r\n        this.loadData();\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.loadData = function () {\r\n        this.onHandleParams();\r\n        this.onHandleQueryParams();\r\n    };\r\n    /**\r\n     * Get params on route\r\n     * Call api get project data and role data\r\n     */\r\n    InterviewListPerRolePageComponent.prototype.reciveRefresh = function () {\r\n        this.loadData();\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onHandleParams = function () {\r\n        var _this = this;\r\n        this.paramsSubs = this.activatedRoute.params.subscribe(function (params) {\r\n            _this.roleId = params['roleId'];\r\n            if (_this.roleId) {\r\n                _this.subscription = _this.interviewService\r\n                    .getProjectByProRequirement(_this.roleId)\r\n                    .subscribe(function (data) {\r\n                    _this.project = data.body;\r\n                    console.log('project: ', _this.project);\r\n                    if (_this.project) {\r\n                        _this.onHandleCountBidOrMatch();\r\n                    }\r\n                }, function (res) {\r\n                    _this.onError(res.message);\r\n                });\r\n                _this.onGetInterviewByRole(_this.roleId);\r\n            }\r\n        });\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onHandleQueryParams = function () {\r\n        var _this = this;\r\n        this.paramsSubs = this.activatedRoute.queryParams.subscribe(function (queryParams) {\r\n            _this.requestid = queryParams['requestid'];\r\n        });\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.gotoMatchOrBid = function (index) {\r\n        if (this.project.postId) {\r\n            // bid\r\n            this.router.navigate(['/bid-common-individual'], {\r\n                queryParams: {\r\n                    roleID: this.roleId,\r\n                    tab: index,\r\n                    postId: this.project.postId\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.router.navigate(['/match-common-individual'], {\r\n                queryParams: {\r\n                    roleid: this.roleId,\r\n                    requestid: this.requestid,\r\n                    index: index\r\n                }\r\n            });\r\n        }\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onHandleCountBidOrMatch = function () {\r\n        var _this = this;\r\n        this.subscription = this.interviewService\r\n            .getCountBidOrMatch(this.roleId, this.project.postId != null)\r\n            .subscribe(function (data) {\r\n            console.log((_this.project.postId ? 'bid' : 'match') + \" :\", data);\r\n            var arrData = data.body;\r\n            _this.countOfPros = arrData.length;\r\n            _this.countOfSaved = 0;\r\n            arrData.forEach(function (item) {\r\n                if (item.status === 'SAVED' || item.status === 'SAVE') {\r\n                    _this.countOfSaved++;\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * TODO: get one by role\r\n     *\r\n     */\r\n    InterviewListPerRolePageComponent.prototype.onGetInterviewByRole = function (roleId) {\r\n        var _this = this;\r\n        this.subscription = this.interviewService\r\n            .getInterviewByRole(roleId)\r\n            .subscribe(function (res) {\r\n            if (res.body && res.body.length > 0) {\r\n                _this.listInterview = res.body;\r\n                _this.interview = _this.listInterview[0];\r\n                _this.currentSession = _this.interview.interviewSessions[0];\r\n                console.log('interviews : ', _this.listInterview);\r\n                console.log('current interview: ', _this.interview);\r\n                console.log('current session: ', _this.currentSession);\r\n            }\r\n        }, function (res) {\r\n            _this.onError(res.message);\r\n        });\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onError = function (error) {\r\n        this.jhiAlertService.error(error.mesage, null, null);\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onSave = function (data) {\r\n        console.log('data emit: ', data);\r\n        this.saveOrNext(data);\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onNext = function (data) {\r\n        console.log('data emit: ', data);\r\n        this.saveOrNext(data);\r\n        var index = this.interview.interviewSessions.findIndex(function (item) {\r\n            return item.id === data.id;\r\n        });\r\n        console.log('session no :', index + 1);\r\n        if (index + 1 < this.interview.interviewSessions.length) {\r\n            this.currentSession = this.interview.interviewSessions[index + 1];\r\n        }\r\n        else {\r\n            console.log('Last session!');\r\n            this.gotoInterviewSummary();\r\n        }\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.saveOrNext = function (value) {\r\n        var _this = this;\r\n        this.subscription = this.interviewService\r\n            .updateInterviewSession(value)\r\n            .subscribe(function (data) {\r\n            console.log('save or next : ', data);\r\n            var count = 0;\r\n            var i = 0;\r\n            _this.interview.interviewSessions.forEach(function (session, index) {\r\n                if (session.decision === 'GO' && session.id !== data.body.id) {\r\n                    count++;\r\n                }\r\n            });\r\n            if (count === _this.interview.interviewSessions.length - 1 &&\r\n                data.body.decision === 'GO') {\r\n                _this.interview.status = 'COMPLETED';\r\n                _this.gotoInterviewSummary();\r\n            }\r\n        }, function (res) {\r\n            _this.onError(res.message);\r\n        });\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onChangeCurrentSession = function (sessionSelected) {\r\n        this.currentSession = sessionSelected;\r\n        this.canGotoInterviewSummary = false;\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.setCurrentInterview = function (currentInterviewSelectedOutput) {\r\n        console.log('Change current interview: ', currentInterviewSelectedOutput);\r\n        this.interview = currentInterviewSelectedOutput;\r\n        this.currentSession = currentInterviewSelectedOutput.interviewSessions[0];\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.setActive = function (currentSession, session) {\r\n        var cssClasses;\r\n        if (this.canGotoInterviewSummary) {\r\n            cssClasses = {};\r\n        }\r\n        else {\r\n            if (currentSession.interviewType === session.interviewType) {\r\n                cssClasses = {\r\n                    active: true\r\n                };\r\n            }\r\n            else {\r\n                cssClasses = {};\r\n            }\r\n        }\r\n        return cssClasses;\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.gotoInterviewSummary = function () {\r\n        var _this = this;\r\n        if (this.interview.status === 'COMPLETED' ||\r\n            this.interview.status === 'ACCEPTED' ||\r\n            this.interview.status === 'DECLINED' ||\r\n            this.interview.status === 'PENDING_OFFER') {\r\n            this.principal.identity().then(function (account) {\r\n                var currentUserLoggedInId = account.id;\r\n                console.log('current login id: ', currentUserLoggedInId);\r\n                if (currentUserLoggedInId === _this.interview.createdBy.id) {\r\n                    _this.canGotoInterviewSummary = true;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onHandleApprove = function (data) {\r\n        var _this = this;\r\n        this.interviewService\r\n            .approveOffer({\r\n            id: this.interview.id,\r\n            approved: data\r\n        })\r\n            .subscribe(function (res) {\r\n            data ? console.log('accepted') : console.log('passed');\r\n            if (res) {\r\n                _this.loadData();\r\n            }\r\n        }, function (res) {\r\n            return _this.onError(res.message);\r\n        });\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.onPrevious = function (session) {\r\n        this.currentSession = this.interview.interviewSessions[this.interview.interviewSessions.length - 1];\r\n        this.canGotoInterviewSummary = false;\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.setStatusClasses = function (status) {\r\n        return {\r\n            badge: true,\r\n            'badge-status-awaiting-review': status === 'PENDING_AVAILABILITY' || status === 'COMPLETED',\r\n            'badge-status-review-declined': status === 'DECLINED_AVAILABILITY',\r\n            'badge-status-review-completed': status === 'SCHEDULED' || status === 'PENDING_OFFER',\r\n            'badge-blue': status === 'ACCEPTED',\r\n            'badge-gray': status === 'DECLINED'\r\n        };\r\n    };\r\n    InterviewListPerRolePageComponent.prototype.ngOnDestroy = function () {\r\n        if (this.paramsSubs) {\r\n            this.paramsSubs.unsubscribe();\r\n        }\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    };\r\n    InterviewListPerRolePageComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'app-interview-list-per-role-page',\r\n            template: __webpack_require__(\"./src/main/webapp/app/screens/biz-interview/containers/interview-list-per-role-page/interview-list-per-role-page.component.html\"),\r\n            styles: [__webpack_require__(\"./src/main/webapp/app/screens/biz-interview/containers/interview-list-per-role-page/interview-list-per-role-page.component.scss\")]\r\n        }),\r\n        __metadata(\"design:paramtypes\", [router_1.ActivatedRoute,\r\n            interview_service_1.InterviewService,\r\n            ng_jhipster_1.JhiAlertService,\r\n            shared_1.Principal,\r\n            router_1.Router])\r\n    ], InterviewListPerRolePageComponent);\r\n    return InterviewListPerRolePageComponent;\r\n}());\r\nexports.InterviewListPerRolePageComponent = InterviewListPerRolePageComponent;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/app/screens/biz-interview/containers/interview-list-per-role-page/interview-list-per-role-page.component.ts\n");

/***/ })

})